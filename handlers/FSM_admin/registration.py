import json
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import Director
from staff_config import staff
import buttons
from aiogram.dispatcher.filters import Text
import os


class RegistrationStates(StatesGroup):
    full_name = State()
    phone_number = State()
    company_name = State()


async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û:", reply_markup=buttons.cancel_markup)
    await RegistrationStates.full_name.set()


async def load_fullname(message: types.Message, state: FSMContext):
    full_name = message.text
    async with state.proxy() as data:
        data['fio'] = full_name

        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await RegistrationStates.next()


async def load_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text
    async with state.proxy() as data:
        data['phone'] = phone_number

        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
        await RegistrationStates.next()


async def load_company_name(message: types.Message, state: FSMContext):
    company_name = message.text
    new_id = message.from_user.id
    if new_id not in staff:
        staff.append(new_id)

        print(staff)

        config_path = 'staff_config.py'

        with open(config_path, 'w') as config_file:
            config_file.write(f"staff = {staff}")
        async with state.proxy() as data:
            data['name_of_company'] = company_name
            data['telegramm_id'] = new_id

        # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        output_message = f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n" \
                         f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" \
                         f"–§–ò–û: {data['fio']}\n" \
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone']}\n" \
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {data['name_of_company']}"

        await message.answer(output_message, reply_markup=buttons.StartStaff)
        await state.finish()

    else:
        await message.answer("–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –±–∞–π–µ—Ä–æ–≤")


# async def cmd_get_registered_users(message: types.Message):
#     if message.from_user.id in Director:
#         # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
#         output_message = (f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫/–ë–∞–π–µ—Ä üßëüèª‚Äçüíºüë®üèº‚Äçüíº"
#                           f"\n---------------------------------\n"
#                           f"ID-—Ç–µ–ª–µ–≥—Ä–∞–º–∞: {user_id}\n"
#                           f"–§–ò–û: {user_data['full_name']}\n"
#                           f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone_number']}\n"
#                           f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {user_data['company_name']}"
#                           f"\n---------------------------------\n")
#
#         # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
#         inline_btn = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'remove_user_{user_id}')
#         inline_kb = InlineKeyboardMarkup().add(inline_btn)
#
#         await message.answer(output_message, reply_markup=inline_kb)
#     else:
#         await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
#
# async def cmd_remove_user_callback(query: types.CallbackQuery):
#     user_id_to_remove = int(query.data.split('_')[-1])
#     removed_user_data = registered_users.pop(user_id_to_remove, None)
#     if removed_user_data:
#         output_message = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞. ‚ùå"
#                           f"\n---------------------------------\n")
#         output_message += f"–§–ò–û: {removed_user_data['full_name']}\n"
#         output_message += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {removed_user_data['phone_number']}\n"
#         output_message += (f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {removed_user_data['company_name']}"
#                            f"\n---------------------------------")
#         await query.message.edit_text(output_message)
#
#     else:
#         await query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
#
#     with open('reg.json', 'w') as file:
#         json.dump(registered_users, file)


async def cancel_reg(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=None)


def registration(dp: Dispatcher):
    dp.register_message_handler(cancel_reg, Text(equals="–û—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(cmd_start, commands=['become_buyer'], commands_prefix='_/')
    dp.register_message_handler(load_fullname, state=RegistrationStates.full_name)
    dp.register_message_handler(load_phone_number, state=RegistrationStates.phone_number)
    dp.register_message_handler(load_company_name, state=RegistrationStates.company_name)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    # dp.register_message_handler(cmd_get_registered_users, commands=['–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'])
    # dp.register_callback_query_handler(cmd_remove_user_callback, text_contains='remove_user')
